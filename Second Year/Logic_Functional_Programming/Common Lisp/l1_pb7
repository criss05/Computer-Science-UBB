;The functions that need to be executed are:
;A) deleteMain( list, n)
;B)succesor(list)
;C)main_fun(list)
;D)is_linear(list)

;A) Write a function to eliminate the n-th element of a linear list.

;deleteNth(l1l2..ln, pos, n)= (), n=0
;                             deleteNth(l2...ln, pos+1, n), pos=n
;                             l1 U deleteNth(l2..ln, pos+1, n), pos!=n


(defun deleteNth (l pos n)
  (cond
       ((null l) ())
       ((= pos n) (cdr l))
       (t (cons (car l)  (deleteNth (cdr l) (+ pos 1) n)))
  )
)

(defun deleteMain (l n) (deleteNth l 0 n))


;B) Write a function to determine the successor of a number represented digit by digit as a list, 
;without transforming the representation of the number from list to number. 
;Example: (1 9 3 5 9 9) --> (1 9 3 6 0 0)

;reverse_list(l1l2...ln)=(), n=0
;                        reverse_list(l2..ln) U l1

(defun reverse_list(l)
  (cond 
      ((null l) ())
      (t (append (reverse_list (cdr l)) (list (car l))))
  )
)

;succesor(l1l2..ln, c) = (), n=0 and C=0
;                        (1), n=0 and C=1
;                        l1+C U succesor(l2..ln, 0), l1+C!=10 
;                        0 U succesor(l2..ln, 1), l1+C=10 

(defun succesor_rev(l c)
  (cond 
      ((and (null l) (= c 0)) ())
      ((null l) (list 1))
      ((/= (+ (car l) c) 10) (cons (+ (car l) c) (succesor_rev (cdr l) 0)))
      (t (cons 0 (succesor_rev (cdr l) 1)))
  )
)


(defun succesor(l) 
  (cond 
      ((null l) ())
      (t (reverse_list (succesor_rev (reverse_list l) 1)))
   )
)

;C) Write a function to return the set of all the atoms of a list.
;Exemplu: (1 (2 (1 3 (2 4) 3) 1) (1 4)) ==> (1 2 3 4)

;combine_list(l1l2..ln)=(), n=0
;                       l1 U combine_list(l2..ln), if l1 is atom
;                       combine_list(l1) U combine_list(l2..ln), if l1  is list

(defun combine_list(l)
  (cond 
      ((null l) ())
      ((atom (car l)) (append (list (car l)) (combine_list (cdr l))))
      (t (append (combine_list (car l)) (combine_list (cdr l))))
   )
)


(defun removeEL(l e)
  (cond
       ((null l) ())
       ((equal (car l) e) (removeEL (cdr l) e))
       (t (cons (car l) (removeEL (cdr l) e)))
  )
)


;set_list(l1l2..ln)=(), n=0
;                   l1 U set_list(remove_el(l2..ln, l1)), nrOcc(l1, l1..ln)>1
;                  l1 U set_list(l2..ln), nrOcc(l1, l1..ln) =1

(defun set_list(l)
  (cond
      ((null l) ())
      (t (cons (car l) (set_list (removeEL l (car l)))))
  )
)
 
(defun main_fun(l) (set_list (combine_list l)))


;D) Write a function to test whether a linear list is a set.

;nrOcc(l1l2..ln, e)=0, n=0
;                   1+nrOcc(l2..ln, e), l1==e
;                   nrOcc(l2..ln, e), otherwise

(defun nrOcc(l e)
  (cond 
       ((null l) 0)
       ((= (car l) e) (+ (nrOcc (cdr l) e) 1))
       (t (nrOcc (cdr l) e))
  )
)

;is_linear(l1l2..ln)= t, n=0
;                    is_linear(l2..ln), nrOcc(l1..ln, l1)=1


(defun is_linear_sol(l cl)
  (cond
      ((null l) t)
      ((= (nrOcc cl (car l)) 1) (is_linear_sol (cdr l) cl))
      (t NIL)                     
   )
)

(defun is_linear(l) (is_linear_sol l l))